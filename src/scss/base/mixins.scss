@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    src: url('../fonts/#{$file_name}.woff2') format('woff2'),
      url('../fonts/#{$file_name}.woff') format('woff');
    font-family: $font_name;
    font-weight: #{$weight};
    font-style: #{$style};
    font-display: swap;
  }
}

//Percent
@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;

  @return $result;
}

//REM
@function rem($px) {
  $result: math.div($px, 16) + rem;

  @return $result;
}

//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;

  @return $result;
}

//Currency
@mixin currency($sym) {
  &::after {
    content: '#{$sym}';
  }
}

@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minMobile,
  $keepSize: 0
) {
  // for calc();
  $addSize: math.div($startSize - $minSize, 16);

  // breakpoints in EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Source: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;

  // get property value
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};

  @if $widthFrom == $containerWidth and $maxWidthContainer == 0 {
    $widthFrom: $maxWidth;
  }

  @if $minSize <= 0 {
    $minSize: 0.0001;
  }

  @if $startSize <= 0 {
    $startSize: 0.0001;
  }

  // if negative value
  @if $minSize > $startSize {
    $propertyValue: #{'clamp('
      rem($startSize)
      ','
      $flyValue
      ','
      rem($minSize)
      ')'};
  }

  @if $widthFrom ==
    $containerWidth or
    $widthFrom ==
    $maxWidth or
    $keepSize ==
    1 or
    $keepSize ==
    2
  {
    @media (min-width: $widthFromMedia) {
      #{$property}: rem($startSize);
    }
  }

  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    // if clamp() supports;
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }

    // if clamp() is not supports;
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div(
            $widthFrom,
            16
          ) - math.div($widthTo, 16)}
      );
    }
  }

  @if $widthTo == $minMobile or $keepSize == 1 or $keepSize == 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: rem($minSize);
    }
  }
}

//Burger
@mixin burger($burger-width, $burger-height, $burger-color) {
  display: none;

  @media (max-width: $tablet) {
    position: relative;
    z-index: 5;
    display: block;
    width: $burger-width;
    height: $burger-height;
    color: $burger-color;

    &::before,
    &::after {
      content: '';
      position: absolute;
      left: 0;
      border-radius: 10px;
      width: 100%;
      height: 2px;
      background-color: currentColor;
      transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
      will-change: transform;
    }

    &::before {
      top: 0;
    }

    &::after {
      top: calc(100% - 2px);
      transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
    }

    span {
      position: absolute;
      left: 0;
      top: 50%;
      border-radius: 10px;
      width: 100%;
      height: 2px;
      background-color: currentColor;
      transform: translateY(-50%);
      transition: transform 0.3s ease-in-out, width 0.3s ease-in-out;
    }

    .menu-open & {
      &::before {
        top: 50%;
        transform: rotate(45deg);
        transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
      }

      &::after {
        top: 50%;
        transform: rotate(-45deg);
        transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
      }

      span {
        transform: translateX(-100%) scale(0.01);
        transition: transform 0.3s ease-in-out;
      }
    }
  }
}

@function neg($value) {
  @return calc($value * -1);
}

@mixin underline {
  position: relative;
  display: inline-block;
  vertical-align: middle;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 2px;
    background-color: currentColor;
    transform: scaleX(0);
    transform-origin: bottom right;
    transition: transform 0.2s linear;
  }

  &:hover::before {
    transform: scaleX(1);
    transform-origin: bottom left;
  }
}

@mixin lineSeparator() {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    left: 50%;
    bottom: 0;
    width: 100vw;
    height: 1px;
    background-color: var(--color-black);
    transform: translateX(-50%);
  }
}

@mixin zoom {
  transition: transform 0.3s cubic-bezier(0.23, 1, 0.32, 1);

  @media (any-hover: hover) {
    &:hover {
      transform: scale(1.1);
    }
  }
}

@mixin button-filled($width, $heigth) {
  width: $width;
  height: $heigth;
  border-radius: 6px;
  background-color: $red;
  text-transform: capitalize;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  &:hover {
    box-shadow: 0px 5px 45px 5px $red;
  }
}

@mixin button-transparent($width, $heigth) {
  width: $width;
  height: $heigth;
  border-radius: 6px;
  background-color: transparent;
  text-transform: capitalize;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid $red;
  color: $red;
  &:hover {
    box-shadow: 0px 5px 45px 5px $red;
  }
}
